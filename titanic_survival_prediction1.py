# -*- coding: utf-8 -*-
"""titanic survival prediction1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ExaIqJIBSSX3oUKIBFfxkr6DscT7x2F7

**TASK 1**-
**Project Title**: Titanic Survival Prediction Model


*   Author -Himanshi Gupta

* Batch-April

*   Domain -Data Science


*   Aim -To build a model that predict Wheather the passenger on hte titanic survived or not.
"""

!pip install kaggle

"""#uploading the dataset

"""

from google.colab import files
import os

# Upload the kaggle (1).json file
uploaded = files.upload()

# Get the name of the uploaded file
filename = next(iter(uploaded))

# Move the uploaded file to ~/.kaggle directory
os.makedirs('/root/.kaggle', exist_ok=True)
os.rename(filename, '/root/.kaggle/kaggle.json')

# Provide the appropriate permissions
os.chmod('/root/.kaggle/kaggle.json', 0o600)

!ls -l /root/.kaggle/kaggle.json

with open('/root/.kaggle/kaggle.json', 'r') as file:
    print(file.read())

os.environ['KAGGLE_CONFIG_DIR'] = '/root/.kaggle'

"""listed the dataset"""

!kaggle datasets list

!kaggle competitions download -c titanic

!unzip titanic.zip

"""# importing libraries"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""#read the dataset"""

titanic_data=pd.read_csv('/content/train.csv')

"""#top 5 head values"""

titanic_data.head()

"""#checking the shape of the dataset"""

titanic_data.shape

"""# information of data like type,not null values

"""

titanic_data.info()

"""#total count of null values"""

titanic_data.isnull().sum()

"""#droping the cabin column"""

titanic_data = titanic_data.drop(columns='Cabin', axis=1)

"""# filling  missing values in the 'Age' column of the DataFrame titanic_data with the mean value of the 'Age' column."""

titanic_data['Age'].fillna(titanic_data['Age'].mean(), inplace=True)

print(titanic_data['Embarked'].mode())

"""#prints the most common value in the 'Embarked' column"""

print(titanic_data['Embarked'].mode()[0])

"""#fills missing values in the 'Embarked' column of the DataFrame titanic_data with the most common value (mode) of the 'Embarked' column."""

titanic_data['Embarked'].fillna(titanic_data['Embarked'].mode()[0], inplace=True)

"""#count totall number of the null values"""

titanic_data.isnull().sum()

"""#some statiscal values of data"""

titanic_data.describe()

"""#returns a Series containing counts of unique values in a DataFrame column survived"""

titanic_data['Survived'].value_counts()

"""#setting the default aesthetic parameters for Seaborn plots."""

sns.set()

"""# snippet is a way to dynamically inspect the type of titanic_data and print out relevant information based on whether it's a dictionary or a list."""

print(type(titanic_data))
print(titanic_data.keys()) if isinstance(titanic_data, dict) else None
print(len(titanic_data)) if isinstance(titanic_data, list) else None

"""#printing all the columns of data

"""

titanic_data.columns

"""#It's plotting the count of occurrences of each unique value in the 'Survived' column of the titanic_data dataset."""

sns.countplot(x='Survived', data=titanic_data)

"""#count the occurrences of unique value in a 'sex' column,"""

titanic_data['Sex'].value_counts()

"""#plotting the count of occurrences of each unique value in the 'Sex' column of the DataFrame"""

sns.countplot(x='Sex', data=titanic_data)

"""#create a bar plot with two categorical variables: 'Sex' and 'Survived"""

sns.countplot(x='Sex', hue='Survived', data=titanic_data)

"""#plotting the count of occurrences of each unique value in the 'Pclass' column of the DataFrame titanic_data."""

sns.countplot(x='Pclass', data=titanic_data)

"""#create a bar plot with two categorical variables: 'Pclass' and 'Survived'."""

sns.countplot(x='Pclass', hue='Survived', data=titanic_data)

"""#create a bar plot with two categorical variables: 'Embarked' and 'Survived'."""

sns.countplot(x='Embarked', hue='Survived', data=titanic_data)

"""#return a Series object with the counts of each unique value in the 'Sex' column"""

titanic_data['Sex'].value_counts()

"""#return a Series object with the counts of each unique value in the 'Embarked' column"""

titanic_data['Embarked'].value_counts()

"""#replace the values in the 'Sex' and 'Embarked' columns of the DataFrame with numerical equivalents."""

titanic_data.replace({'Sex':{'male':0,'female':1}, 'Embarked':{'S':0,'C':1,'Q':2}}, inplace=True)

"""#display the first five rows of the DataFrame"""

titanic_data.head()

"""#droping the pessenger column

"""

X = titanic_data.drop(columns = ['PassengerId','Name','Ticket','Survived'],axis=1)
Y=titanic_data['Survived']

"""#display the first few rows of X"""

print(X)

"""#display first few rows of the y column"""

print(Y)

"""# split data into training and testing sets"""

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size=0.2, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

"""# initializing a logistic regression model."""

model = LogisticRegression()

X_train.info()

"""
#fit the logistic regression model to the training data,
"""

model.fit(X_train, Y_train)

"""#

#trained logistic regression model
"""

X_train_prediction = model.predict(X_train)

"""#generate predictions for the input features in X_train"""

print(X_train_prediction)

"""# calculating the accuracy of model on the training data."""

training_data_accuracy = accuracy_score(Y_train, X_train_prediction)
print('Accuracy score of training data : ', training_data_accuracy)

"""#generate predictions on the testing data"""

X_test_prediction = model.predict(X_test)

print(X_test_prediction)

"""#calculate the accuracy of your model on the testing data."""

test_data_accuracy = accuracy_score(Y_test, X_test_prediction)
print('Accuracy score of test data : ', test_data_accuracy)